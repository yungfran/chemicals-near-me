{
	"info": {
		"_postman_id": "850b2024-6417-4119-9a67-3938372c7b54",
		"name": "Postman Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Superfunds",
			"item": [
				{
					"name": "General",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"let superfunds = jsonData.superfunds;\r",
									"\r",
									"pm.test(\"Single Field Tests\", function () {\r",
									"    pm.expect(superfunds[0].id).to.eql(9);\r",
									"    pm.expect(superfunds[0].name).to.eql('EIELSON AIR FORCE BASE');\r",
									"    pm.expect(superfunds[0].npl_status).to.eql('Currently on the Final NPL');\r",
									"    pm.expect(superfunds[0].num_chem).to.eql('51');\r",
									"    pm.expect(superfunds[0].city_name).to.eql('FAIRBANKS');\r",
									"    pm.expect(superfunds[0].state).to.eql('ALASKA');\r",
									"    pm.expect(superfunds[0].county).to.eql('FAIRBANKS NORTH STAR');\r",
									"});\r",
									"\r",
									"pm.test(\"Per Page Test\", function () {\r",
									"    pm.expect(superfunds.length).to.eql(12);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.chemicalsnear.me/superfunds",
							"protocol": "https",
							"host": [
								"api",
								"chemicalsnear",
								"me"
							],
							"path": [
								"superfunds"
							]
						}
					},
					"response": []
				},
				{
					"name": "ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"City Existence Test\", function () {\r",
									"    pm.expect(jsonData.city_id).to.eql(17);\r",
									"});\r",
									"\r",
									"pm.test(\"Chemical Existence Test\", function () {\r",
									"    pm.expect(jsonData.contaminants.length).to.greaterThan(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.chemicalsnear.me/superfunds/9",
							"protocol": "https",
							"host": [
								"api",
								"chemicalsnear",
								"me"
							],
							"path": [
								"superfunds",
								"9"
							]
						}
					},
					"response": []
				},
				{
					"name": "Single Filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"let superfunds = jsonData.superfunds;\r",
									"\r",
									"pm.test(\"Single Filter Test\", function () {\r",
									"    pm.expect(superfunds.length).to.eql(12);\r",
									"    pm.expect(jsonData.num_results).to.eql(20);\r",
									"    pm.expect(superfunds[0].id).to.eql(74);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.chemicalsnear.me/superfunds?state=FLORIDA",
							"protocol": "https",
							"host": [
								"api",
								"chemicalsnear",
								"me"
							],
							"path": [
								"superfunds"
							],
							"query": [
								{
									"key": "state",
									"value": "FLORIDA"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Multiple Filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"let superfunds = jsonData.superfunds;\r",
									"\r",
									"pm.test(\"Multiple Filter Test\", function () {\r",
									"    pm.expect(superfunds.length).to.eql(3);\r",
									"    pm.expect(jsonData.num_results).to.eql(3);\r",
									"    pm.expect(superfunds[0].id).to.eql(70);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.chemicalsnear.me/superfunds?state=FLORIDA&city=MIAMI",
							"protocol": "https",
							"host": [
								"api",
								"chemicalsnear",
								"me"
							],
							"path": [
								"superfunds"
							],
							"query": [
								{
									"key": "state",
									"value": "FLORIDA"
								},
								{
									"key": "city",
									"value": "MIAMI"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Alphabetical Sort (asc)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"let superfunds = jsonData.superfunds;\r",
									"\r",
									"pm.test(\"Alphabetical Sort (asc) Test\", function () {\r",
									"    pm.expect(jsonData.num_results).to.eql(189);\r",
									"    pm.expect(superfunds.length).to.eql(12);\r",
									"    pm.expect(superfunds[0].id).to.eql(355);\r",
									"    pm.expect(superfunds[0].name).to.eql('ABC ONE HOUR CLEANERS');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.chemicalsnear.me/superfunds?sort=Alphabetical",
							"protocol": "https",
							"host": [
								"api",
								"chemicalsnear",
								"me"
							],
							"path": [
								"superfunds"
							],
							"query": [
								{
									"key": "sort",
									"value": "Alphabetical"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Alphabetical Sort (dsc)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"let superfunds = jsonData.superfunds;\r",
									"\r",
									"pm.test(\"Alphabetical Sort (dsc) Test\", function () {\r",
									"    pm.expect(jsonData.num_results).to.eql(189);\r",
									"    pm.expect(superfunds.length).to.eql(12);\r",
									"    pm.expect(superfunds[0].id).to.eql(17);\r",
									"    pm.expect(superfunds[0].name).to.eql('YUMA MARINE CORPS AIR STATION');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.chemicalsnear.me/superfunds?sort=-Alphabetical",
							"protocol": "https",
							"host": [
								"api",
								"chemicalsnear",
								"me"
							],
							"path": [
								"superfunds"
							],
							"query": [
								{
									"key": "sort",
									"value": "-Alphabetical"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Numerical Sort (asc)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"let superfunds = jsonData.superfunds;\r",
									"\r",
									"pm.test(\"Numerical Sort (asc) Test\", function () {\r",
									"    pm.expect(jsonData.num_results).to.eql(189);\r",
									"    pm.expect(superfunds.length).to.eql(12);\r",
									"    pm.expect(superfunds[0].id).to.eql(533);\r",
									"    pm.expect(superfunds[0].num_chem).to.eql('1');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.chemicalsnear.me/superfunds?sort=num+of+Contaminants",
							"protocol": "https",
							"host": [
								"api",
								"chemicalsnear",
								"me"
							],
							"path": [
								"superfunds"
							],
							"query": [
								{
									"key": "sort",
									"value": "num+of+Contaminants"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Numerical Sort (dsc)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"let superfunds = jsonData.superfunds;\r",
									"\r",
									"pm.test(\"Numerical Sort (dsc) Test\", function () {\r",
									"    pm.expect(jsonData.num_results).to.eql(189);\r",
									"    pm.expect(superfunds.length).to.eql(12);\r",
									"    pm.expect(superfunds[0].id).to.eql(351);\r",
									"    pm.expect(superfunds[0].num_chem).to.eql('85');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.chemicalsnear.me/superfunds?sort=-num+of+Contaminants",
							"protocol": "https",
							"host": [
								"api",
								"chemicalsnear",
								"me"
							],
							"path": [
								"superfunds"
							],
							"query": [
								{
									"key": "sort",
									"value": "-num+of+Contaminants"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cities",
			"item": [
				{
					"name": "Cities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"let cities = jsonData.cities;\r",
									"\r",
									"pm.test(\"Single Field Tests\", function () {\r",
									"    pm.expect(cities[0].id).to.eql(40);\r",
									"    pm.expect(cities[0].name).to.eql('CHILDERSBURG');\r",
									"    pm.expect(cities[0].population).to.eql(4908);\r",
									"    pm.expect(cities[0].disability).to.eql(21.4);\r",
									"    pm.expect(cities[0].no_health_insurance).to.eql(14.7);\r",
									"    pm.expect(cities[0].median_household_income).to.eql(31163);\r",
									"});\r",
									"\r",
									"pm.test(\"Per Page Test\", function () {\r",
									"    pm.expect(cities.length).to.eql(12);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.chemicalsnear.me/cities",
							"protocol": "https",
							"host": [
								"api",
								"chemicalsnear",
								"me"
							],
							"path": [
								"cities"
							]
						}
					},
					"response": []
				},
				{
					"name": "City ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Superfund Site Existence Test\", function () {\r",
									"    pm.expect(jsonData.superfund_sites.length).to.greaterThan(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Chemical Existence Test\", function () {\r",
									"    pm.expect(jsonData.contaminants.length).to.greaterThan(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.chemicalsnear.me/cities/6",
							"protocol": "https",
							"host": [
								"api",
								"chemicalsnear",
								"me"
							],
							"path": [
								"cities",
								"6"
							]
						}
					},
					"response": []
				},
				{
					"name": "Single Filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"let cities = jsonData.cities;\r",
									"\r",
									"pm.test(\"Single Filter Test\", function () {\r",
									"    pm.expect(cities.length).to.eql(2);\r",
									"    pm.expect(jsonData.num_pages).to.eql(1);\r",
									"    pm.expect(cities[0].id).to.eql(560);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.chemicalsnear.me/cities?state=TEXAS",
							"protocol": "https",
							"host": [
								"api",
								"chemicalsnear",
								"me"
							],
							"path": [
								"cities"
							],
							"query": [
								{
									"key": "state",
									"value": "TEXAS"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Alphabetical Sort (asc)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"let cities = jsonData.cities;\r",
									"\r",
									"pm.test(\"Alphabetical Sort (asc) Test\", function () {\r",
									"    pm.expect(cities.length).to.eql(12);\r",
									"    pm.expect(jsonData.num_pages).to.eql(13);\r",
									"    pm.expect(cities[0].id).to.eql(286);\r",
									"    pm.expect(cities[0].name).to.eql(\"ABERDEEN\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.chemicalsnear.me/cities?sort=Alphabetical",
							"protocol": "https",
							"host": [
								"api",
								"chemicalsnear",
								"me"
							],
							"path": [
								"cities"
							],
							"query": [
								{
									"key": "sort",
									"value": "Alphabetical"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Alphabetical Sort (dsc)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"let cities = jsonData.cities;\r",
									"\r",
									"pm.test(\"Alphabetical Sort (dsc) Test\", function () {\r",
									"    pm.expect(cities.length).to.eql(12);\r",
									"    pm.expect(jsonData.num_pages).to.eql(13);\r",
									"    pm.expect(cities[0].id).to.eql(41);\r",
									"    pm.expect(cities[0].name).to.eql(\"YUMA\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.chemicalsnear.me/cities?sort=-Alphabetical",
							"protocol": "https",
							"host": [
								"api",
								"chemicalsnear",
								"me"
							],
							"path": [
								"cities"
							],
							"query": [
								{
									"key": "sort",
									"value": "-Alphabetical"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Numerical Sort (asc)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"let cities = jsonData.cities;\r",
									"\r",
									"pm.test(\"Numerical Sort (asc) Test\", function () {\r",
									"    pm.expect(cities.length).to.eql(12);\r",
									"    pm.expect(jsonData.num_pages).to.eql(13);\r",
									"    pm.expect(cities[0].id).to.eql(8);\r",
									"    pm.expect(cities[0].population).to.eql(160);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.chemicalsnear.me/cities?sort=Population",
							"protocol": "https",
							"host": [
								"api",
								"chemicalsnear",
								"me"
							],
							"path": [
								"cities"
							],
							"query": [
								{
									"key": "sort",
									"value": "Population"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Numerical Sort (dsc)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"let cities = jsonData.cities;\r",
									"\r",
									"pm.test(\"Numerical Sort (dsc) Test\", function () {\r",
									"    pm.expect(cities.length).to.eql(12);\r",
									"    pm.expect(jsonData.num_pages).to.eql(13);\r",
									"    pm.expect(cities[0].id).to.eql(238);\r",
									"    pm.expect(cities[0].population).to.eql(2709534);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.chemicalsnear.me/cities?sort=-Population",
							"protocol": "https",
							"host": [
								"api",
								"chemicalsnear",
								"me"
							],
							"path": [
								"cities"
							],
							"query": [
								{
									"key": "sort",
									"value": "-Population"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Contaminants",
			"item": [
				{
					"name": "Contaminants",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"let contaminants = jsonData.contaminants;\r",
									"\r",
									"pm.test(\"Single Field Tests\", function () {\r",
									"    pm.expect(contaminants[0].id).to.eql(39);\r",
									"    pm.expect(contaminants[0].name).to.eql('2,4,6-TRINITROTOLUENE');\r",
									"    pm.expect(contaminants[0].molecular_weight).to.eql(227.13);\r",
									"    pm.expect(contaminants[0].boiling_point).to.eql('240 Â°C (explodes)');\r",
									"    pm.expect(contaminants[0].melting_point).to.eql('80.1');\r",
									"});\r",
									"\r",
									"pm.test(\"Per Page Test\", function () {\r",
									"    pm.expect(contaminants.length).to.eql(12);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.chemicalsnear.me/contaminants",
							"protocol": "https",
							"host": [
								"api",
								"chemicalsnear",
								"me"
							],
							"path": [
								"contaminants"
							]
						}
					},
					"response": []
				},
				{
					"name": "Contaminant ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Hazards Existence Test\", function () {\r",
									"    pm.expect(jsonData.hazards.length).to.greaterThan(0);\r",
									"    pm.expect(jsonData.hazard_statements.length).to.greaterThan(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Uses Existence Test\", function () {\r",
									"    pm.expect(jsonData.uses.length).to.greaterThan(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Cities Existence Test\", function () {\r",
									"    pm.expect(jsonData.cities.length).to.greaterThan(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.chemicalsnear.me/contaminants/50",
							"protocol": "https",
							"host": [
								"api",
								"chemicalsnear",
								"me"
							],
							"path": [
								"contaminants",
								"50"
							]
						}
					},
					"response": []
				},
				{
					"name": "Single Filter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"let contaminants = jsonData.contaminants;\r",
									"\r",
									"pm.test(\"Single Filter Test\", function () {\r",
									"    pm.expect(contaminants.length).to.eql(12);\r",
									"    pm.expect(jsonData.num_results).to.eql(17);\r",
									"    pm.expect(contaminants[0].id).to.eql(149);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.chemicalsnear.me/contaminants?hazards=Corrosive",
							"protocol": "https",
							"host": [
								"api",
								"chemicalsnear",
								"me"
							],
							"path": [
								"contaminants"
							],
							"query": [
								{
									"key": "hazards",
									"value": "Corrosive"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Alphabetical Sort (asc)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"let contaminants = jsonData.contaminants;\r",
									"\r",
									"pm.test(\"Alphabetical Sort (asc) Test\", function () {\r",
									"    pm.expect(contaminants.length).to.eql(12);\r",
									"    pm.expect(jsonData.num_results).to.eql(118);\r",
									"    pm.expect(contaminants[0].id).to.eql(5);\r",
									"    pm.expect(contaminants[0].name).to.eql(\"1,1,1-TRICHLOROETHANE\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.chemicalsnear.me/contaminants?sort=Alphabetical",
							"protocol": "https",
							"host": [
								"api",
								"chemicalsnear",
								"me"
							],
							"path": [
								"contaminants"
							],
							"query": [
								{
									"key": "sort",
									"value": "Alphabetical"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Alphabetical Sort (dsc)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"let contaminants = jsonData.contaminants;\r",
									"\r",
									"pm.test(\"Alphabetical Sort (dsc) Test\", function () {\r",
									"    pm.expect(contaminants.length).to.eql(12);\r",
									"    pm.expect(jsonData.num_results).to.eql(118);\r",
									"    pm.expect(contaminants[0].id).to.eql(13);\r",
									"    pm.expect(contaminants[0].name).to.eql(\"TRICHLOROETHENE\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.chemicalsnear.me/contaminants?sort=-Alphabetical",
							"protocol": "https",
							"host": [
								"api",
								"chemicalsnear",
								"me"
							],
							"path": [
								"contaminants"
							],
							"query": [
								{
									"key": "sort",
									"value": "-Alphabetical"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Numerical Sort (asc)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"let contaminants = jsonData.contaminants;\r",
									"\r",
									"pm.test(\"Numerical Sort (asc) Test\", function () {\r",
									"    pm.expect(contaminants.length).to.eql(12);\r",
									"    pm.expect(jsonData.num_results).to.eql(118);\r",
									"    pm.expect(contaminants[0].id).to.eql(96);\r",
									"    pm.expect(contaminants[0].molecular_weight).to.eql(16.043);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.chemicalsnear.me/contaminants?sort=Molecular+Weight",
							"protocol": "https",
							"host": [
								"api",
								"chemicalsnear",
								"me"
							],
							"path": [
								"contaminants"
							],
							"query": [
								{
									"key": "sort",
									"value": "Molecular+Weight"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Numerical Sort (dsc)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"let contaminants = jsonData.contaminants;\r",
									"\r",
									"pm.test(\"Numerical Sort (asc) Test\", function () {\r",
									"    pm.expect(contaminants.length).to.eql(12);\r",
									"    pm.expect(jsonData.num_results).to.eql(118);\r",
									"    pm.expect(contaminants[0].id).to.eql(28);\r",
									"    pm.expect(contaminants[0].molecular_weight).to.eql(390.6);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.chemicalsnear.me/contaminants?sort=-Molecular+Weight",
							"protocol": "https",
							"host": [
								"api",
								"chemicalsnear",
								"me"
							],
							"path": [
								"contaminants"
							],
							"query": [
								{
									"key": "sort",
									"value": "-Molecular+Weight"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}